<!DOCTYPE html>
<html>
<head>
<meta charset="utf8" />
<title>Описание рецепта distdir</title>
</head>
<body>

<table><tr><td style="vertical-align:top;">
<h1>Описание рецепта distdir</h1>
</td><td style="vertical-align:top;">
<a href="argument-list-too-long.htm">Argument list too long</a>,
<a href="index.htm">Как собирать monodevelop</a>
<br />
<a href="test-commad-of-sed.htm">test commad of sed</a>
<br />
<a href="how-to-write-cycle.htm">Как написать цикл</a>
<br />
<a href="creation-of-directories.htm">Создание директорий по списку файлов</a>
</td></tr></table>


<h2>Как работает исходный код</h2>

<pre>
distdir: $(DISTFILES)
        @srcdirstrip=`echo &quot;$(srcdir)&quot; | sed 's/[].[^$$\\*]/\\\\&amp;/g'`; \
        topsrcdirstrip=`echo &quot;$(top_srcdir)&quot; | sed 's/[].[^$$\\*]/\\\\&amp;/g'`; \
        list='$(DISTFILES)'; \
          dist_files=`for file in $$list; do echo $$file; done | \
          sed -e &quot;s|^$$srcdirstrip/||;t&quot; \
              -e &quot;s|^$$topsrcdirstrip/|$(top_builddir)/|;t&quot;`; \
        case $$dist_files in \
          */*) $(MKDIR_P) `echo &quot;$$dist_files&quot; | \
                           sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
                           sort -u` ;; \
        esac; \
        for file in $$dist_files; do \
          if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
          if test -d $$d/$$file; then \
            dir=`echo &quot;/$$file&quot; | sed -e 's,/[^/]*$$,,'`; \
            if test -d &quot;$(distdir)/$$file&quot;; then \
              find &quot;$(distdir)/$$file&quot; -type d ! -perm -700 -exec chmod u+rwx {} \;; \
            fi; \
            if test -d $(srcdir)/$$file &amp;&amp; test $$d != $(srcdir); then \
              cp -fpR $(srcdir)/$$file &quot;$(distdir)$$dir&quot; || exit 1; \
              find &quot;$(distdir)/$$file&quot; -type d ! -perm -700 -exec chmod u+rwx {} \;; \
            fi; \
            cp -fpR $$d/$$file &quot;$(distdir)$$dir&quot; || exit 1; \
          else \
            test -f &quot;$(distdir)/$$file&quot; \
            || cp -p $$d/$$file &quot;$(distdir)/$$file&quot; \
            || exit 1; \
          fi; \
        done
</pre>
@ перед длинной bash-командой, много строк которой соединены символами \ + конец строки
<br />
означает, что не надо распечатывать текст этой команды.
<br />
It means "don't echo this command on the output." So this rule is saying "execute the shell command and don't echo the output.
<br />
<br />
srcdir
<br />
The distinction between ./ (the build directory) and $(srcdir)/ (the source directory) is important because users can build in a separate directory using the ‘--srcdir’ option to configure.
<br />
&nbsp;&nbsp;&nbsp;&nbsp;это из файла <a href="https://www.gnu.org/prep/standards/html_node/Makefile-Basics.html">https://www.gnu.org/prep/standards/html_node/Makefile-Basics.html</a>
<br />
top_srcdir
<br />
— Variable: top_srcdir
<br />
&nbsp;&nbsp;&nbsp;&nbsp;The name of the top-level source code directory for the package. In the top-level directory, this is the same as srcdir. 
<br />
&nbsp;&nbsp;&nbsp;&nbsp;цитата из файла <a href="https://www.gnu.org/software/autoconf/manual/autoconf-2.65/html_node/Preset-Output-Variables.html#index-top_005fsrcdir-134">https://www.gnu.org/software/autoconf/manual/autoconf-2.65/html_node/Preset-Output-Variables.html#index-top_005fsrcdir-134</a>
<br />
<br />
Зачем используется команда t в sed?
<br />
t label
<br />
&nbsp;&nbsp;&nbsp;&nbsp;If a s/// has done a successful substitution since the last input line was read and since the last t or T command, then branch to label; if label is omitted, branch to end of script. 
<br />
<br />
nothing changes without that last t that's why their comment in line 150 is wrong
<br />
<br />
sed 's/[].[^$$\\*]/\\\\&amp;/g'
<br />
вставляет перед любым из символов ] . [ ^ $ \ * два обратных слеша
<br />
в строке sed \\ заменяется на \ самим sed (неясно почему, вероятно из-за потребностей синтаксиса регэкспов sed)
<br />
$$ - передаётся в sed как один $ (это фишка gmake)
<br />
what this command from  gmake Makefile replaces? sed 's/[].[^$$\\*]/\\\\&amp;/g'
<br />
It (likely) inserts "\\" in front of any of the characters: ] . [ ^ $ \ *
<br />
# echo 'foo ^ $ bar.[] baz' | sed 's/[].[^$$\\*]/\\\\&amp;/g'
<br />
foo \\^ \\$ bar\\.\\[\\] baz
<br />
I don't understood, why character set is not closed by first ]
<br />
it is a special case, "]" does not terminate class specification if it is the first character
<br />
&amp; - denotes the substitution
<br />
<br />
как в bash работает case/esac ?
<br />
<a href="http://ss64.com/bash/case.html">http://ss64.com/bash/case.html</a>
<br />
<br />
Зачем он здесь?
<br />
the variable $dist_files contain list of files and directories. case checks if it contain at least one directory, and if it does, then mkdir is called
<br />
whatever dist_files contains, case treats it as a single string, and runs the $(MKDIR_P) if that string contains at least one / character

<br />
<br />
Зачем здесь два цикла for, почему нельзя было обойтись одним общим?
<br />
ну, сначала создаются директории, а потом туда копируются файлы
<br />
почему нельзя делать в один проход пока непонятно.
<br />
<br />
sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,'
<br />
sed '/\//!d' - удалить строки в которых нет /
<br />
d = Delete pattern space. Start next cycle.
<br />
s|^|$(distdir)/|
<br />
в каждое начало строки дописывается значение переменной $(distdir)/, которое передано из gmake в bash уже в виде заменённого текста
<br />
s,/[^/]*$$,,
<br />
эта команда, заменяет имена файлов (то, что не оканчивается на символ '/') на пустые строки, то есть остаются только имена директорий (дублирующиеся от разных файлов)
<br />
/path/to/file/filename1
<br />
/path/to/file/filename1
<br />
здесь заменяется "/filename1" на пустую строку и "/filename2" на пустую строку
<br />
и остаётся два имени /path/to/file /path/to/file
<br />
<br />
man sort
<br />
 -u, --unique
 <br />
&nbsp;&nbsp;&nbsp;&nbsp;with -c, check for strict ordering; without -c, output only the first of an equal run
<br />
<br />
Конструкция if test condition-true является точным эквивалентом конструкции if [ condition-true ], 
где левая квадратная скобка [ выполняет те же действия, что и команда test. 
Закрывающая правая квадратная скобка ] не является абсолютно необходимой, однако, более новые версии Bash требуют ее наличие.
<br />
Команда test -- это встроенная команда Bash, которая выполняет проверки файлов и производит сравнение строк. 
Таким образом, в Bash-скриптах, команда test не вызывает внешнюю (/usr/bin/test) утилиту, которая является частью пакета sh-utils. 
Аналогично, [ не производит вызов утилиты /usr/bin/[, которая является символической ссылкой на /usr/bin/test.
<br />
-d FILE
<br />
&nbsp;&nbsp;&nbsp;&nbsp;FILE exists and is a directory
<br />
-f FILE
<br />
&nbsp;&nbsp;&nbsp;&nbsp;FILE exists and is a regular file

<br />
<br />
|| exit 1;
<br />
это хитрая проверка типа || die, мол если команда cp выполнилась с ошибкой, то надо выйти из цикла и завершить работу

<br />
<br />
переменные srcdir и top_srcdir являются переменными bash, так как они записаны внутри makefile target.
<br />
Каждый рецепт bash запускается независимо.
<br />
Из-за того, что это переменные bash - в оригинальном коде нельзя разбить один recipe на две части убрав \ после esac.
<br />
В случае фрагментации рецепта на два фрагмента, переменная dist_dir во втором фрагменте будет неопределена и код не сработает.

<br />
<br />
ну вот вроде бы всё понятно, что здесь происходит за исключением некоторых моментов (например неясно как работает $(MKDIR_P) )

</body>
</html>

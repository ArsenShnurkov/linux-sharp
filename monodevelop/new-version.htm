<!DOCTYPE html>
<html>
<head>
<meta charset="utf8" />
<title>На что заменять</title>
</head>
<body>

<table><tr><td style="vertical-align:top;">
<h1>На что заменять</h1>
</td><td style="vertical-align:top;">
<a href="argument-list-too-long.htm">Argument list too long</a>,
<a href="index.htm">Как собирать monodevelop</a>
<br />
&nbsp;
</td></tr></table>


<h2>как переписать?</h2>
но как теперь это переписать из bash в gmake?
<br />
<br />
<a href="http://stackoverflow.com/questions/7039811/how-do-i-process-extremely-long-lists-of-files-in-a-make-recipe">http://stackoverflow.com/questions/7039811/how-do-i-process-extremely-long-lists-of-files-in-a-make-recipe</a>
<br />
попробуем заменить for из bash на $(foreach ...) из gmake
<br />
переменную можно держать в памяти длинную, если склеивать её средствами gmake, а не средствами bash.
<br />
держать её длинную надо между циклами, потому что так сделать проще, чем объяснить, как будет работать один общий цикл
<br />
<br />
Общая идея такова:
<br />
1) взять сразу дедуплицированный список ^@
<br />
2) отсортировать его средствами gmake
<br />
3) для каждой записи в списке:
<br />
3.1) провести замены srcdir и всего такого
<br />
3.2) если там есть / то подумать, не надо ли создать директорию
<br />
3.3) если директория не такая как предыдущая, то создать её при помощи mkdir -p (сравнение нужно для дедупликации директорий)
<br />
3.4) выполнить все прочие проверки и копирования из остатка кода (с ними надо разобраться по-подробнее)
<br />
<br />
не надо сортировать повторно после замен srcdir, потому что исходный код тоже этого не делает.
<br />
в исходном коде сортировка есть только при создании директорий
<br />
<br />
Проверка на то, с багой sed или без, должна выполняться на стадии configure (хотя вообще сомнительно, что она нужна в наше время)

<h2>Возможность вычисления значения переменной склеиванием</h2>
<a href="https://www.gnu.org/software/make/manual/make.html#Appending">https://www.gnu.org/software/make/manual/make.html#Appending</a>

<br />
<br />

For the append operator, ‘<samp>+=</samp>’, the right-hand side is considered
immediate if the variable was previously set as a simple variable
(‘<samp>:=</samp>’ or ‘<samp>::=</samp>’), and deferred otherwise.

<br />
<br />
For the shell assignment operator, ‘!=’, the right-hand side is evaluated immediately and handed to the shell.
The result is stored in the variable named on the left, and that variable becomes a simple variable (and will thus be re-evaluated on each reference). 

<h2>Перенос подготовки списка из bash в gmake</h2>

переменные gmake можно пересчитать в другие перемнные вызовом newvar=$(shell echo $(oldvar) | sed ... )
<br />
$(shell сама возвращает содержимое stdout (при этом, правда, не проверяются ошибки, а значит и не обрабатываются)
<br />
<br />
список директорий надо подготавливать средствами gmake
<br />
это замедлит работу, потому что на каждый файл надо будет запустить bash и sed (будем надеятся, что исполняемые файлы будут запускаться из кеша диска и это будет быстро)
<br />
<br />

По причине замедления, такое решение нужно применять не во всех местах, а по мере необходимости.
<br />
То есть надо вставялять в autotools проверку на длину переменной
<br />
но сделать это будет непросто (в том смысле, что надо будет слова вызывать шелл с какой-нибудь командой вычисления длины), 
<br />
так как сам makefile не имеет средств для подсчёта длины строки
<br />
<a href="https://www.gnu.org/software/make/manual/html_node/Text-Functions.html">https://www.gnu.org/software/make/manual/html_node/Text-Functions.html</a>

<h2>Вариант вычисления переменной в foreach</h2>

<pre>
srcdirstrip:=$(shell echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`);
topsrcdirstrip:=$(shell echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`);
SUBSTITUTED_DISTFILES:='';
^@

distdir: $(DISTFILES)
        list='$(DISTFILES)'; \
          dist_files=`for file in $$list; do echo $$file; done | \
          sed -e &quot;s|^$$srcdirstrip/||;t&quot; \
              -e &quot;s|^$$topsrcdirstrip/|$(top_builddir)/|;t&quot;`; \
        case $$dist_files in \
          */*) $(MKDIR_P) `echo &quot;$$dist_files&quot; | \
                           sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
                           sort -u` ;; \
        esac; \
        for file in ${SUBSTITUTED_DISTFILES}; do \
          if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
          if test -d $$d/$$file; then \
            dir=`echo &quot;/$$file&quot; | sed -e 's,/[^/]*$$,,'`; \
            if test -d &quot;$(distdir)/$$file&quot;; then \
              find &quot;$(distdir)/$$file&quot; -type d ! -perm -700 -exec chmod u+rwx {} \;; \
            fi; \
            if test -d $(srcdir)/$$file &amp;&amp; test $$d != $(srcdir); then \
              cp -fpR $(srcdir)/$$file &quot;$(distdir)$$dir&quot; || exit 1; \
              find &quot;$(distdir)/$$file&quot; -type d ! -perm -700 -exec chmod u+rwx {} \;; \
            fi; \
            cp -fpR $$d/$$file &quot;$(distdir)$$dir&quot; || exit 1; \
          else \
            test -f &quot;$(distdir)/$$file&quot; \
            || cp -p $$d/$$file &quot;$(distdir)/$$file&quot; \
            || exit 1; \
          fi; \
        done
</pre>

</body>
</html>

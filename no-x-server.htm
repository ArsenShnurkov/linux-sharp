<!DOCTYPE html>
<html>
<head>
<meta charset="utf8" />
<title>Как написать графическую программу на mono без X-сервера</title>
</head>
<body>

<table><tr><td valign="top">
<h1>Как написать графическую программу на mono без X-сервера</h1>
</td><td valign="top">
<a href="index.htm">Разработка на C# под linux</a>
<br />
&nbsp;
</td></tr></table>

<a href="http://stackoverflow.com/questions/12135300/how-to-access-a-linux-framebuffer-in-mono-mono-cairo-gtk">http://stackoverflow.com/questions/12135300/how-to-access-a-linux-framebuffer-in-mono-mono-cairo-gtk</a>
<br />
<br />
<font style="color:red">Что такое Cairo?</font>
<br />
<font style="color:red">Что общего у Mono.Cairo и Gtk# ?</font>

<h2>SVGAlib</h2>
SVGAlib is an open-source low-level graphics library 
<br />
which runs on Linux and FreeBSD and allows programs to <strong>change video mode</strong> and display full-screen graphics.
<br />
The library was popular in mid-1990s.
<br />
Toward 2000, many applications that used it migrated to X11 and SDL,
which itself can make use of SVGAlib as a video driver.


<h2>Framebuffer</h2>
<a href="https://en.wikipedia.org/wiki/Linux_framebuffer">https://en.wikipedia.org/wiki/Linux_framebuffer</a>
<br />
The Linux framebuffer (fbdev) is a graphic hardware-independent abstraction layer to show graphics on a computer monitor
<br />
a part of video memory containing a current video frame, and the Linux framebuffer means "Access method to the framebuffer under the Linux kernel"
<br />
without relying on system-specific libraries such as SVGALib or another user space software.
<br />
<br />
several Linux programs such as MPlayer, links2, Netsurf, fbida and libraries such as GGI, SDL, GTK+ and Qt Extended can use the framebuffer directly.

<h2>SDL, zlib lincense</h2>
Initial release 	1998; 17 years ago
<br />
<a href="https://en.wikipedia.org/wiki/Simple_DirectMedia_Layer">https://en.wikipedia.org/wiki/Simple_DirectMedia_Layer</a>
<br />
 cross-platform software development library designed to provide a low level hardware abstraction layer to computer multimedia hardware components.
<br />
manages <strong>video</strong>, audio, input devices, CD-ROM, threads, shared object loading, networking and timers
<br />
SDL can be used instead of XInput and XAudio2.

<br />
 <br />
SDL is a wrapper around the operating-system-specific functions game engines needs to access. The only purpose of SDL is to provide a common framework for accessing these functions for multiple operating systems (cross-platform).
<br />
<br />
Under the zlib License, SDL 2.0 is freely available for static linking in closed-source projects
<br />
SDL 2.0 is a major update to the SDL 1.2 codebase with a different, not backwards-compatible API
<br />
multiple window support, hardware-accelerated 2D graphics, and better Unicode support.
<br />
Support for Mir and Wayland is available since SDL 2.0.2 (but still disabled by default).
<br />
<br />
C# bindings - <a href="https://github.com/flibitijibibo/SDL2-CS">https://github.com/flibitijibibo/SDL2-CS</a>
<br />
<br />
examples are 
<br />
open source - Freeciv, OpenTTD, The Battle for Wesnoth.
<br />
commercial - Angry Birds, Unreal Tournament


<h2>DirectFB, LGPL</h2>
<a href="https://en.wikipedia.org/wiki/DirectFB">https://en.wikipedia.org/wiki/DirectFB</a>
<br />
support for translucent windows and multiple display layers on top of the Linux framebuffer without requiring any kernel modifications.
<br />
<br />
In 2006, a version of DirectFB was included in the software stack for the CE Linux Forum's Audio/Video Graphics Specification V2

<h2>Xvfb</h2>
Xvfb provides an X server that can run on machines with no display hardware and no physical input devices. 
<br />
It emulates a dumb framebuffer using virtual memory.
<br />
<br />
- doing batch processing with Xvfb as a background rendering engine
<br />
- providing an unobtrusive way to run applications that don't really need an X server but insist on having one anyway.
<br />
- testing clients against unusual depths and screen configurations
<br />
- load testing, as an aid to porting the X server to a new platform
<br />
<br />
contains a convenience script called xvfb-run which simplifies the automated execution of X clients 
<br />
in a virtual server environment. This convenience script requires the use of the xauth program.

<br />
<br />
<a href="http://superuser.com/questions/624918/how-to-run-gtk-app-on-linux-without-an-x-server">http://superuser.com/questions/624918/how-to-run-gtk-app-on-linux-without-an-x-server</a>
<br />
Xvfb :1 &amp;
<br />
export DISPLAY=:1
<br />
./runMyApp &amp;

<h2>XDirectFB</h2>
DirectFB can host XDirectFB, a rootless X server implementation that uses DirectFB windows for X11 top-level windows.
<br />
XDirectFB is an interface that mimics the X11 interface through the DirectFB API to simplify running applications written for X11 on DirectFB
<br />
<br />
DirectFBGL is an OpenGL extension for DirectFB/XDirectFB
<br />
that uses Direct Rendering Infrastructure (DRI) in the <strong>Mesa 3D</strong> library to support OpenGL hardware acceleration.

<h2>Xephyr</h2>
<a href="https://en.wikipedia.org/wiki/Xephyr">https://en.wikipedia.org/wiki/Xephyr</a>
<br />
<br />
Xephyr is a display server implementing the X11 display server protocol based on KDrive which targets a window on a host X Server
<br />
KDrive - one of XOrg implementations.
<br />
<br />
Xephyr is an X-on-X implementation. Since version 1.16.0, Xephyr serves as the primary development environment for the new 2D acceleration subsystem (Glamor), permitting rapid development and testing on a single machine
<br />
<br />
<font style="color:red">Что он делает, зачем он нужен, как используется в Qubes OS?</font>




<h2>Cairo</h2>
Cairo (graphics), a free software vector graphics library
<br />
the idea of a cross-platform library to access display server, not tied to the X Window System.
<br />
<a href="https://en.wikipedia.org/wiki/Cairo_%28graphics%29">https://en.wikipedia.org/wiki/Cairo_(graphics)</a>
<br />
<br />
Cairo supports output to a number of different back-ends, known as "surfaces" in its code. 
<br />
 - X Window System, via both Xlib and XCB
 <br />
 - OpenGL contexts (directly and via glitz)
 <br />
- local image buffers, PNG files, PDF, PostScript, DirectFB and SVG files.

<h3>Cairo on framebuffer</h3>
<a href="http://lists.cairographics.org/archives/cairo/2010-July/020378.html">http://lists.cairographics.org/archives/cairo/2010-July/020378.html</a>
<br />
<a href="http://cairo.cairographics.narkive.com/JSE33zWp/frame-buffer-and-special-pixel-formats">http://cairo.cairographics.narkive.com/JSE33zWp/frame-buffer-and-special-pixel-formats</a>

<h3>Cairo on Wayland?</h3>



<h2>Gtk</h2>
<a href="http://www.gtk.org/api/2.6/gtk/gtk-framebuffer.html">http://www.gtk.org/api/2.6/gtk/gtk-framebuffer.html</a>
<br />
GTK+ has not only full support for cairo, but 
<br />
starting in 2005 with version 2.8, uses cairo to render the majority of its graphical control elements, and
<br />
since 3.0 all rendering is done through cairo.
<br />
<br />
GtkFB libraries


<h2>Mono</h2>

The Mono Project, including Moonlight, has been using cairo since very early 
<br />
in conception to power the backends of its GDI+ (libgdiplus) and System.Drawing namespaces.
<br />
<br />
Mono.Cairo library exposes a DirectFBSurface type,
<br />
however the constructor for that surface takes two IntPtr arguments and is not documented
<br />
you need to pass a pointer to a native IDirectFB and a IDirectFBSurface.
<br />
<a href="http://cgit.freedesktop.org/cairo/tree/src/cairo-directfb-surface.c#n499">http://cgit.freedesktop.org/cairo/tree/src/cairo-directfb-surface.c#n499</a>
<br />
<a href="https://github.com/mono/mono/blob/master/mcs/class/Mono.Cairo/Mono.Cairo/DirectFBSurface.cs">https://github.com/mono/mono/blob/master/mcs/class/Mono.Cairo/Mono.Cairo/DirectFBSurface.cs</a>
<br />
<br />
The EntryPointNotFoundException you get, means that the symbol cairo_directfb_surface_create with (IntPtr, IntPtr) as arguments was not found in your libcairo.so.2 
<br />
This can likely be the case, if directfb was not enabled at compile time in cairo.
<br />
You can check for directfb support in cairo by doing:
<br />
readelf -Ws /usr/lib/libcairo.so.2 | grep directfb
<br />
If the result (output) is empty, you lack directfb support. In this case you must recompile cairo with --enable-directfb argument passed to the configure script.
<br />
<br />
The GTK# libraries all bind explicitly to the X11 interface


</body>
</html>
